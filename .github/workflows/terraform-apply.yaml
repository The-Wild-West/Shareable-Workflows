name: Terraform Apply

on:
    workflow_call:
        inputs:
          environment:
            type: string
            description: the environment to deploy to
        secrets:
          admin_account_id:
            description: the account id of secret storage
          role_name:
            description: the oidc provider role
        outputs:
          all_outputs_json:
            description: "All Terraform outputs as a JSON string"
            value: ${{ inputs.environment != 'root' && jobs.Build-Infrastructure-Applications.outputs.all_outputs_json || inputs.environment == 'root' && jobs.Build-Infrastructure-Root.outputs.all_outputs_json }}

                
jobs:
    Build-Infrastructure-Applications:
        if: ${{ inputs.environment != 'root'}}
        outputs:
          all_outputs_json: ${{ steps.get_outputs.outputs.all_outputs_json }}
        runs-on: ubuntu-latest
        env:
            BACKEND_CONFIG: ./environments/${{inputs.environment}}/backend.config 
            TFVARS_FILE: ./environments/${{inputs.environment}}/${{inputs.environment}}.tfvars
        steps:
            - name: AWS Login - Management Environment
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: arn:aws:iam::${{ secrets.admin_account_id }}:role/${{ secrets.role_name }}
                aws-region: us-east-1
            
            - name: Get GitHub Token
              shell: bash
              run: |
                SECRET_VALUE=$(aws ssm get-parameter --name "${{ env.SECRET_NAME }}" --query SecretString --output text --region us-east-1 )
                echo "SHAREABLE_WORKFLOW_TOKEN=$SECRET_VALUE" >> $GITHUB_ENV
              env:
                SECRET_NAME: "Shareable_Workflow_Token"
            
            - name: Set Account ID
              id: set_account_id
              shell: bash
              run: |
                if [[ '${{ inputs.environment }}' == 'dev' ]]; then
                  AWS_ACCOUNT_ID=$(aws ssm get-parameter --name "The-Wild-West-AccountID-Dev" | jq -r '.Parameter.Value')
                  echo "aws_account_id=$AWS_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
                elif [[ '${{ inputs.environment }}' == 'uat' ]]; then
                  AWS_ACCOUNT_ID=$(aws ssm get-parameter --name "The-Wild-West-AccountID-Uat" | jq -r '.Parameter.Value')
                  echo "aws_account_id=$AWS_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
                elif [[ '${{ inputs.environment }}' == 'prod' ]]; then
                  AWS_ACCOUNT_ID=$(aws ssm get-parameter --name "The-Wild-West-AccountID-Prod" | jq -r '.Parameter.Value')
                  echo "aws_account_id=$AWS_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
                elif [[ '${{ inputs.environment }}' == 'root' ]]; then
                  echo "aws_account_id=${{ secrets.admin_account_id }}" >> "$GITHUB_OUTPUT"
                else
                  echo "Unable to establish account id!"
                  exit 1
                fi

            - name: AWS Login - Application Environment
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: arn:aws:iam::${{ steps.set_account_id.outputs.aws_account_id }}:role/${{ secrets.role_name }}
                aws-region: us-east-1
        
            - name: Checkout Terraform Repository
              if: contains(github.event.repository.name, 'Infrastructure')
              uses: actions/checkout@v4
              with:
                repository: The-Wild-West/${{ github.event.repository.name }}
                ref: ${{ inputs.environment }}
                fetch-depth: 1
                token: ${{ github.token }}
            
            - name: Checkout Terraform Repository
              if: ${{ !contains(github.event.repository.name, 'Infrastructure') }}
              uses: actions/checkout@v4
              with:
                repository: The-Wild-West/${{ github.event.repository.name }}-Infrastructure
                ref: ${{ inputs.environment }}
                fetch-depth: 1
                token: ${{ github.token }}


            - name: Configure Git for Terraform
              shell: bash
              run: |
                git config --global url."https://${{ env.SHAREABLE_WORKFLOW_TOKEN }}@github.com/".insteadOf "https://github.com/"


            - name: Terraform Setup
              shell: bash
              run: |
                sudo apt-get install unzip
                wget https://releases.hashicorp.com/terraform/1.12.2/terraform_1.12.2_linux_amd64.zip > /dev/null
                unzip terraform_1.12.2_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform init -backend-config="${{ env.BACKEND_CONFIG }}"
                terraform get -update
            
            - name: Terraform Plan
              shell: bash
              run: |
                terraform plan --var-file="${{ env.TFVARS_FILE}}"
            
            - name: Terraform Apply
              shell: bash
              run: |
                terraform apply --var-file="${{ env.TFVARS_FILE}}" -auto-approve
            
            - name: Get Terraform Outputs
              id: get_outputs
              run: |
                {
                  echo "all_outputs_json<<EOF"
                  terraform output -json
                  echo "EOF"
                } >> "$GITHUB_OUTPUT"
    Build-Infrastructure-Root:
        if: ${{ inputs.environment == 'root'}}
        runs-on: ubuntu-latest
        outputs:
          all_outputs_json: ${{ steps.get_outputs.outputs.all_outputs_json }}

        steps:
            - name: AWS Login - Management Environment
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: arn:aws:iam::${{ secrets.admin_account_id }}:role/${{ secrets.role_name }}
                aws-region: us-east-1
              
            - name: Set Account ID
              id: set_account_id
              shell: bash
              run: |
                  AWS_ACCOUNT_ID_DEV=$(aws ssm get-parameter --name "The-Wild-West-AccountID-Dev" | jq -r '.Parameter.Value')
                  echo "aws_account_id_dev=$AWS_ACCOUNT_ID_DEV" >> "$GITHUB_OUTPUT"
                  AWS_ACCOUNT_ID_UAT=$(aws ssm get-parameter --name "The-Wild-West-AccountID-Uat" | jq -r '.Parameter.Value')
                  echo "aws_account_id_uat=$AWS_ACCOUNT_ID_UAT" >> "$GITHUB_OUTPUT"
                  AWS_ACCOUNT_ID_PROD=$(aws ssm get-parameter --name "The-Wild-West-AccountID-Prod" | jq -r '.Parameter.Value')
                  echo "aws_account_id_prod=$AWS_ACCOUNT_ID_PROD" >> "$GITHUB_OUTPUT"
                
            
            - name: Checkout Terraform
              uses: actions/checkout@v3
              with:
                repository: ${{ github.repository }}
                ref: 'main'

            - name: Terraform Setup
              shell: bash
              run: |
                sudo apt-get install unzip
                wget https://releases.hashicorp.com/terraform/1.12.2/terraform_1.12.2_linux_amd64.zip > /dev/null
                unzip terraform_1.12.2_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform init
                terraform get -update
            
            - name: Terraform Plan
              shell: bash
              run: |
                terraform plan \
                -var "dev_account_id=${{ steps.set_account_id.outputs.aws_account_id_dev }}" \
                -var "uat_account_id=${{ steps.set_account_id.outputs.aws_account_id_uat }}" \
                -var "prod_account_id=${{ steps.set_account_id.outputs.aws_account_id_prod }}" \
            
            
            - name: Terraform Apply
              shell: bash
              run: |
                terraform apply -auto-approve \
                -var "dev_account_id=${{ steps.set_account_id.outputs.aws_account_id_dev }}" \
                -var "uat_account_id=${{ steps.set_account_id.outputs.aws_account_id_uat }}" \
                -var "prod_account_id=${{ steps.set_account_id.outputs.aws_account_id_prod }}" \
            
            - name: Get Terraform Outputs
              id: get_outputs
              run: |
                {
                  echo "all_outputs_json<<EOF"
                  terraform output -json
                  echo "EOF"
                } >> "$GITHUB_OUTPUT"
            
              
              